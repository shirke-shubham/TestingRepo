PROCEDURE "RGA_APPROVE_REJECT" (
    IN IN_ACTION NVARCHAR(30),
    IN IN_APPTYPE NVARCHAR(30),
    IN IN_RGA_NO BIGINT,
    IN IN_APPROVER_LEVEL BIGINT,
    IN IN_APPROVER_ROLE NVARCHAR(50),
    IN ST_RGA_HEADER "ST_RGA_HEADER",
    IN ST_RGA_ITEMS "ST_RGA_ITEMS",
    IN ST_RGA_EVENT_LOGS "ST_RGA_EVENT_LOGS",
    OUT OUT_SUCCESS NVARCHAR(100),
    OUT OUT_ERROR_CODE BIGINT,
	  OUT OUT_ERROR_MESSAGE VARCHAR(1000) 
) 
  LANGUAGE SQLSCRIPT 
  SQL SECURITY INVOKER 
  --DEFAULT SCHEMA <default_schema_name>
  --  READS SQL DATA
  AS 
BEGIN 

   DECLARE LV_CREATION_DATE TIMESTAMP; 
   DECLARE LV_REMARK NVARCHAR(100);
   DECLARE LV_EVENT_NO INTEGER;
   DECLARE LV_EVENT_CODE INTEGER;
   DECLARE LV_APPROVER_LEVEL INTEGER;
   DECLARE LV_STATUS INTEGER;
   DECLARE MAX_LEVEL INTEGER;
   DECLARE LV_OUT_SUCCESS NVARCHAR(100);
	 DECLARE LV_SUCCESS_ACTION NVARCHAR(50);
   DECLARE LV_APPROVER_ROLE NVARCHAR(50);
   DECLARE LV_EVENT_COUNT INTEGER;
   DECLARE LV_COMMENT NVARCHAR(100);


  /*************************************
  Write your procedure logic
  *************************************/

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE; 

  SELECT CURRENT_TIMESTAMP INTO LV_CREATION_DATE FROM DUMMY;
  
    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
      
    OUT_SUCCESS := null;
    LV_OUT_SUCCESS := null;
    LV_SUCCESS_ACTION := null;


  IF (:IN_ACTION = 'APPROVE') 
  THEN          
    LV_STATUS := 3;
    LV_EVENT_CODE := 3;
    LV_SUCCESS_ACTION := 'Approved';

    UPDATE "DEALER_PORTAL_RGA_HEADER"
    SET 
    "STATUS" = :LV_STATUS,
    "APPROVER_LEVEL" =null,
    "APPROVER_ROLE"= null,
    "CREATED_ON"=:LV_CREATION_DATE
    WHERE "RGA_NO" = :IN_RGA_NO;			
    
    COMMIT;
    LV_OUT_SUCCESS := 'Success';

  ELSEIF(:IN_ACTION = 'APPROVE_PENDING')
  THEN
    LV_EVENT_CODE := 2;
    LV_STATUS := 2;
    LV_SUCCESS_ACTION := 'Send To ' || :IN_APPROVER_ROLE || ' For Approval';

      UPDATE "DEALER_PORTAL_RGA_HEADER"
      SET 
      "STATUS" = :LV_STATUS,
      "APPROVER_LEVEL" =:IN_APPROVER_LEVEL,
      "APPROVER_ROLE"= :IN_APPROVER_ROLE,
      "CREATED_ON"=:LV_CREATION_DATE
      WHERE "RGA_NO" = :IN_RGA_NO;			

    LV_OUT_SUCCESS := 'Success';

  ELSEIF (:IN_ACTION = 'REJECT')
  THEN
    LV_STATUS := 4;
    LV_EVENT_CODE := 4;
    LV_SUCCESS_ACTION := 'Rejected';

    UPDATE "DEALER_PORTAL_RGA_HEADER"
      SET 
      "STATUS" = :LV_STATUS,
      "APPROVER_LEVEL" =:IN_APPROVER_LEVEL,
      "APPROVER_ROLE"= :IN_APPROVER_ROLE,
      "CREATED_ON"=:LV_CREATION_DATE
      WHERE "RGA_NO" = :IN_RGA_NO;

    LV_OUT_SUCCESS := 'Success';

  END IF;	

  IF :LV_OUT_SUCCESS = 'Success'
    THEN
    SELECT COUNT(*) into LV_EVENT_COUNT FROM "DEALER_PORTAL_RGA_EVENT_LOGS" 
    WHERE "RGA_NO" = :IN_RGA_NO;

    LV_EVENT_NO := LV_EVENT_COUNT + 1;
    LV_REMARK := '';
    LV_COMMENT := :IN_ACTION;
    
    INSERT INTO "DEALER_PORTAL_RGA_EVENT_LOGS"
    (
        "RGA_NO","EVENT_NO","EVENT_CODE","USER_ID","USER_NAME","USER_ROLE","REMARK","COMMENT","CREATION_DATE"
    )
    SELECT :IN_RGA_NO,:LV_EVENT_NO,:LV_EVENT_CODE,"USER_ID","USER_NAME","USER_ROLE","REMARK", :LV_COMMENT, :LV_CREATION_DATE FROM :ST_RGA_EVENT_LOGS;

    COMMIT; 
    OUT_SUCCESS := 'Request No ' || :IN_RGA_NO || ' ' || :LV_SUCCESS_ACTION;
      ELSE
    OUT_SUCCESS := null;
      END IF;


END;